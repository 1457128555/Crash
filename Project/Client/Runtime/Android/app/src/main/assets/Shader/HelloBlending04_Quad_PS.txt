//  HelloBlending04_Quad_PS

uniform sampler2D uDiffuseTex;

in vec4 oTexCoord; 

out vec4 FragColor;

vec3 Inversion(vec3 color)
{
    return vec3(1.f) - color;
}

vec3 Grayscale(vec3 color)
{
    
    float average = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;
    return vec3(average);
}

const float offset = 1.0 / 300.0;  
vec2 offsets[9] = vec2[](
    vec2(-offset,  offset), // 左上
    vec2( 0.0f,    offset), // 正上
    vec2( offset,  offset), // 右上
    vec2(-offset,  0.0f),   // 左
    vec2( 0.0f,    0.0f),   // 中
    vec2( offset,  0.0f),   // 右
    vec2(-offset, -offset), // 左下
    vec2( 0.0f,   -offset), // 正下
    vec2( offset, -offset)  // 右下
);

float Sharpen[9] = float[](
        -1.f, -1.f, -1.f,
        -1.f,  9.f, -1.f,
        -1.f, -1.f, -1.f
    );

float EdgeDetect[9] = float[](
        -1.f, -1.f, -1.f,
        -1.f,  8.f, -1.f,
        -1.f, -1.f, -1.f
    );

float Blur[9] = float[](
    1.0 / 16.f, 2.0 / 16.f, 1.0 / 16.f,
    2.0 / 16.f, 4.0 / 16.f, 2.0 / 16.f,
    1.0 / 16.f, 2.0 / 16.f, 1.0 / 16.f  
);

vec4 PostProcess(vec2 uv, float kernel[9])
{
    vec4 col = vec4(0.0);
    for(int i = 0; i < 9; i++)
        col += kernel[i] * texture(uDiffuseTex, uv + offsets[i]);
    return col;
}

void main()
{
    FragColor = texture(uDiffuseTex, oTexCoord.xy);

    FragColor = PostProcess(oTexCoord.xy, EdgeDetect);
    FragColor.w = 1.f;
}