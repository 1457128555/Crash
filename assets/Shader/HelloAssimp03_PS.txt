//  HelloAssimp03_PS

#include "CommonUniforms_PS.txt"
#include "CommonLighting.txt"

struct Material 
{
    vec4  ambient;
    vec4  diffuse;
    vec4  specular;     //  w: shininess

}; 
uniform Material uMaterial;

uniform sampler2D uDiffuseTex;
uniform sampler2D uSpecularTex;


// #define NR_POINT_LIGHTS 4
// uniform PointLight uPointLight[NR_POINT_LIGHTS];
// uniform SpotLight uSpotLight;

in vec4 oWorldPos;
in vec4 oWorldNor;
in vec4 oTexCoord; 

out vec4 FragColor;

void main()
{
    //vec3 diffuseColor = uMaterial.diffuse.rgb;
    //vec3 specularColor = uMaterial.specular.rgb;
    float specularStrength = uMaterial.specular.w;

    vec3 specularColor = texture(uSpecularTex, oTexCoord.xy).rgb;
    vec3 diffuseColor = texture(uDiffuseTex, oTexCoord.xy).rgb;

    vec3 result = vec3(0.0);  

    vec3 norm = normalize(oWorldNor.xyz);
    
    // Directional Light
    result += calculateLighting(oWorldPos.xyz, norm, diffuseColor, specularColor, specularStrength);

    FragColor = vec4(result, 1.0);
}